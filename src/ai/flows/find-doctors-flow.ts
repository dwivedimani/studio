
'use server';
/**
 * @fileOverview Provides a Genkit flow to find plausible doctor information based on a user-provided location and optional specialty.
 * The information is AI-generated and should not be considered real-time or factual.
 *
 * - findDoctors - A function that takes a location/specialty and returns a list of plausible doctors.
 * - FindDoctorsInput - The input type for the findDoctors function.
 * - FindDoctorsOutput - The return type for the findDoctorsOutput function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FindDoctorsInputSchema = z.object({
  location: z.string().describe("The city, zip code, or general area to search for doctors."),
  specialty: z.string().optional().describe("The optional medical specialty of the doctor (e.g., 'pediatrician', 'cardiologist')."),
  language: z.string().optional().default('en').describe("The language for the AI response, e.g., 'en', 'es'. ISO 639-1 code."),
});
export type FindDoctorsInput = z.infer<typeof FindDoctorsInputSchema>;

const DoctorSchema = z.object({
  name: z.string().describe("The plausible name of the doctor or clinic."),
  specialty: z.string().describe("The plausible specialty of the doctor."),
  address: z.string().describe("The plausible full address of the doctor's office or clinic."),
  phone: z.string().optional().describe("The plausible phone number, if available."),
});

const FindDoctorsOutputSchema = z.object({
  doctors: z
    .array(DoctorSchema)
    .describe("A list of plausible doctors or clinics generated by the AI near the specified location and matching the specialty, if provided."),
  disclaimer: z
    .string()
    .describe("A disclaimer stating that the information is AI-generated, may not be real or current, and to verify independently."),
  searchedLocation: z.string().describe("The location input provided by the user for the search."), 
  searchedSpecialty: z.string().optional().describe("The specialty input provided by the user for the search, if any.")
});
export type FindDoctorsOutput = z.infer<typeof FindDoctorsOutputSchema>;

export async function findDoctors(input: FindDoctorsInput): Promise<FindDoctorsOutput> {
  return findDoctorsFlow(input);
}

const LLMPromptOutputSchema = z.object({
  doctors: z
    .array(DoctorSchema)
    .describe("A list of plausible doctors or clinics generated by the AI."),
  disclaimer: z
    .string()
    .describe("The mandatory disclaimer about AI-generated content."),
  searchedLocation: z.string().optional().describe("AI's attempt to echo the searched location."),
  searchedSpecialty: z.string().optional().describe("AI's attempt to echo the searched specialty."),
});

const findDoctorsPrompt = ai.definePrompt({
  name: 'findDoctorsPrompt',
  input: {schema: FindDoctorsInputSchema},
  output: {schema: LLMPromptOutputSchema},
  prompt: `You are an assistant that helps users find doctors by generating plausible examples.
Your response MUST be in the language specified by the code: {{{language}}}.
(For example, if 'es', respond in Spanish. If 'fr', respond in French. Default to English if language is 'en' or not explicitly supported.)

Based on the provided location: {{{location}}}{{#if specialty}} and specialty: {{{specialty}}}{{/if}}, generate a list of 3 to 5 plausible doctor names (or clinic names), their specialties, full addresses, and phone numbers (if you can make one up).
If no specialty is provided, suggest general practitioners or a mix of common specialties.
The generated data should look realistic but is not real. Ensure the addresses appear reasonable for a general urban or suburban area.

Crucially, you MUST include a 'disclaimer'. The disclaimer should state: "The doctor information provided is AI-generated. It may not be real, accurate, or current. Always verify information with official sources and consult with healthcare providers for medical advice."
ALL parts of your response, including doctor names, specialties, addresses, and the disclaimer, must be in the language: {{{language}}}.
You should also try to include 'searchedLocation' and 'searchedSpecialty' (if provided) in your response, which are the original inputs by the user.

Format your response as a JSON object according to the output schema. Ensure 'doctors' is an array of objects matching the Doctor schema and 'disclaimer' is a string. The language of the content in the JSON fields must match {{{language}}}.
  `,
});

const findDoctorsFlow = ai.defineFlow(
  {
    name: 'findDoctorsFlow',
    inputSchema: FindDoctorsInputSchema,
    outputSchema: FindDoctorsOutputSchema, 
  },
  async (input: FindDoctorsInput): Promise<FindDoctorsOutput> => {
    const { output: llmOutput } = await findDoctorsPrompt(input);

    if (!llmOutput || !llmOutput.doctors || !llmOutput.disclaimer) {
      console.error(
        'AI model failed to generate valid doctor information (core fields like doctors list or disclaimer might be missing/malformed). Input:',
        input,
        'LLM Output (if any):', llmOutput
      );
      throw new Error(
        'The AI model could not generate the core doctor information (list of doctors and disclaimer) as expected. Please try rephrasing or try again later.'
      );
    }

    return {
      doctors: llmOutput.doctors,
      disclaimer: llmOutput.disclaimer,
      searchedLocation: input.location, 
      searchedSpecialty: input.specialty || undefined, 
    };
  }
);

