'use server';
/**
 * @fileOverview Provides a Genkit flow to find plausible doctor information based on a user-provided location and optional specialty.
 * The information is AI-generated for illustrative purposes and should not be considered real-time or factual.
 *
 * - findDoctors - A function that takes a location/specialty and returns a list of plausible doctors.
 * - FindDoctorsInput - The input type for the findDoctors function.
 * - FindDoctorsOutput - The return type for the findDoctors function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FindDoctorsInputSchema = z.object({
  location: z.string().describe("The city, zip code, or general area to search for doctors."),
  specialty: z.string().optional().describe("The optional medical specialty of the doctor (e.g., 'pediatrician', 'cardiologist')."),
});
export type FindDoctorsInput = z.infer<typeof FindDoctorsInputSchema>;

const DoctorSchema = z.object({
  name: z.string().describe("The plausible name of the doctor or clinic."),
  specialty: z.string().describe("The plausible specialty of the doctor."),
  address: z.string().describe("The plausible full address of the doctor's office or clinic."),
  phone: z.string().optional().describe("The plausible phone number, if available."),
});

const FindDoctorsOutputSchema = z.object({
  doctors: z
    .array(DoctorSchema)
    .describe("A list of plausible doctors or clinics generated by the AI near the specified location and matching the specialty, if provided."),
  disclaimer: z
    .string()
    .describe("A disclaimer stating that the information is AI-generated, for illustrative purposes, may not be real or current, and to verify independently."),
  searchedLocation: z.string().describe("The location input provided by the user for the search."),
  searchedSpecialty: z.string().optional().describe("The specialty input provided by the user for the search, if any.")
});
export type FindDoctorsOutput = z.infer<typeof FindDoctorsOutputSchema>;

export async function findDoctors(input: FindDoctorsInput): Promise<FindDoctorsOutput> {
  return findDoctorsFlow(input);
}

const findDoctorsPrompt = ai.definePrompt({
  name: 'findDoctorsPrompt',
  input: {schema: FindDoctorsInputSchema},
  output: {schema: FindDoctorsOutputSchema},
  prompt: `You are an assistant that helps users find doctors by generating plausible, illustrative examples.
Based on the provided location: {{{location}}}{{#if specialty}}} and specialty: {{{specialty}}}{{/if}}, generate a list of 3 to 5 plausible doctor names (or clinic names), their specialties, full addresses, and phone numbers (if you can make one up).
If no specialty is provided, suggest general practitioners or a mix of common specialties.
The generated data should look realistic but is not real.
Ensure the addresses appear reasonable for a general urban or suburban area.

Crucially, you MUST include a disclaimer. The disclaimer should state: "The doctor information provided is AI-generated for illustrative purposes only. It may not be real, accurate, or current. Always verify information with official sources and consult with healthcare providers for medical advice."
Also, return the 'searchedLocation' and 'searchedSpecialty' (if provided) which are the original inputs by the user.

Format your response as a JSON object according to the output schema.
  `,
});

const findDoctorsFlow = ai.defineFlow(
  {
    name: 'findDoctorsFlow',
    inputSchema: FindDoctorsInputSchema,
    outputSchema: FindDoctorsOutputSchema,
  },
  async (input: FindDoctorsInput): Promise<FindDoctorsOutput> => {
    const { output: promptOutput } = await findDoctorsPrompt(input);

    if (!promptOutput) {
      console.error(
        'AI model failed to generate valid doctor information matching the expected schema. Input:',
        input
      );
      throw new Error(
        'The AI model could not generate doctor information based on your request. Please try rephrasing or try again later.'
      );
    }

    // If promptOutput is not null, it has been validated against FindDoctorsOutputSchema by Genkit.
    // It should contain `doctors`, `disclaimer`.
    // `searchedLocation` and `searchedSpecialty` should also be there if the LLM followed the prompt,
    // but we will use the direct input values for these fields in the final output for robustness.
    return {
      doctors: promptOutput.doctors,
      disclaimer: promptOutput.disclaimer,
      searchedLocation: input.location, // Use the original input for accuracy
      searchedSpecialty: input.specialty || undefined, // Use the original input, ensuring undefined if not provided
    };
  }
);
