'use server';
/**
 * @fileOverview Provides a Genkit flow to find plausible doctor information based on a user-provided location and optional specialty.
 * The information is AI-generated for illustrative purposes and should not be considered real-time or factual.
 *
 * - findDoctors - A function that takes a location/specialty and returns a list of plausible doctors.
 * - FindDoctorsInput - The input type for the findDoctors function.
 * - FindDoctorsOutput - The return type for the findDoctors function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FindDoctorsInputSchema = z.object({
  location: z.string().describe("The city, zip code, or general area to search for doctors."),
  specialty: z.string().optional().describe("The optional medical specialty of the doctor (e.g., 'pediatrician', 'cardiologist')."),
});
export type FindDoctorsInput = z.infer<typeof FindDoctorsInputSchema>;

const DoctorSchema = z.object({
  name: z.string().describe("The plausible name of the doctor or clinic."),
  specialty: z.string().describe("The plausible specialty of the doctor."),
  address: z.string().describe("The plausible full address of the doctor's office or clinic."),
  phone: z.string().optional().describe("The plausible phone number, if available."),
});

// This is the schema for the flow's final output.
// It requires searchedLocation.
const FindDoctorsOutputSchema = z.object({
  doctors: z
    .array(DoctorSchema)
    .describe("A list of plausible doctors or clinics generated by the AI near the specified location and matching the specialty, if provided."),
  disclaimer: z
    .string()
    .describe("A disclaimer stating that the information is AI-generated, for illustrative purposes, may not be real or current, and to verify independently."),
  searchedLocation: z.string().describe("The location input provided by the user for the search."), // Required in final output
  searchedSpecialty: z.string().optional().describe("The specialty input provided by the user for the search, if any.")
});
export type FindDoctorsOutput = z.infer<typeof FindDoctorsOutputSchema>;

export async function findDoctors(input: FindDoctorsInput): Promise<FindDoctorsOutput> {
  return findDoctorsFlow(input);
}

// Intermediate schema for what the LLM prompt is expected to return.
// Key difference: searchedLocation and searchedSpecialty are optional here,
// as the LLM might not reliably echo them back. The flow will populate these
// from the original input for the final FindDoctorsOutput.
const LLMPromptOutputSchema = z.object({
  doctors: z
    .array(DoctorSchema)
    .describe("A list of plausible doctors or clinics generated by the AI."), // doctors array itself is required
  disclaimer: z
    .string()
    .describe("The mandatory disclaimer about AI-generated content."), // disclaimer string itself is required
  // These are optional in case the LLM omits them; the flow will use input values.
  searchedLocation: z.string().optional().describe("AI's attempt to echo the searched location."),
  searchedSpecialty: z.string().optional().describe("AI's attempt to echo the searched specialty."),
});

const findDoctorsPrompt = ai.definePrompt({
  name: 'findDoctorsPrompt',
  input: {schema: FindDoctorsInputSchema},
  output: {schema: LLMPromptOutputSchema}, // Use the more lenient schema for LLM's direct output
  prompt: `You are an assistant that helps users find doctors by generating plausible, illustrative examples.
Based on the provided location: {{{location}}}{{#if specialty}}} and specialty: {{{specialty}}}{{/if}}, generate a list of 3 to 5 plausible doctor names (or clinic names), their specialties, full addresses, and phone numbers (if you can make one up).
If no specialty is provided, suggest general practitioners or a mix of common specialties.
The generated data should look realistic but is not real.
Ensure the addresses appear reasonable for a general urban or suburban area.

Crucially, you MUST include a 'disclaimer'. The disclaimer should state: "The doctor information provided is AI-generated for illustrative purposes only. It may not be real, accurate, or current. Always verify information with official sources and consult with healthcare providers for medical advice."
You should also try to include 'searchedLocation' and 'searchedSpecialty' (if provided) in your response, which are the original inputs by the user.

Format your response as a JSON object according to the output schema. Ensure 'doctors' is an array of objects matching the Doctor schema and 'disclaimer' is a string.
  `,
});

const findDoctorsFlow = ai.defineFlow(
  {
    name: 'findDoctorsFlow',
    inputSchema: FindDoctorsInputSchema,
    outputSchema: FindDoctorsOutputSchema, // Flow's final output uses the stricter schema
  },
  async (input: FindDoctorsInput): Promise<FindDoctorsOutput> => {
    // llmOutput will be of type z.infer<typeof LLMPromptOutputSchema> | null
    const { output: llmOutput } = await findDoctorsPrompt(input);

    if (!llmOutput) {
      // This means the LLM's response failed validation against LLMPromptOutputSchema.
      // This typically happens if 'doctors' array or 'disclaimer' string are missing or malformed.
      console.error(
        'AI model failed to generate valid doctor information (core fields like doctors list or disclaimer might be missing/malformed). Input:',
        input,
        'LLM Output (if any):', llmOutput
      );
      throw new Error(
        'The AI model could not generate the core doctor information (list of doctors and disclaimer) as expected. Please try rephrasing or try again later.'
      );
    }

    // At this point, llmOutput is not null, and llmOutput.doctors and llmOutput.disclaimer exist and are correctly typed
    // (due to LLMPromptOutputSchema making them required fields).
    // llmOutput.searchedLocation and llmOutput.searchedSpecialty might be undefined if the LLM omitted them.

    // Construct the final FindDoctorsOutput, ensuring searchedLocation is present (from input)
    // and specialty is correctly handled (from input), adhering to FindDoctorsOutputSchema.
    return {
      doctors: llmOutput.doctors,
      disclaimer: llmOutput.disclaimer,
      searchedLocation: input.location, // Use the original input for guaranteed presence and accuracy
      searchedSpecialty: input.specialty || undefined, // Use the original input, ensuring undefined if not provided
    };
  }
);
