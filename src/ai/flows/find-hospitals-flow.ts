'use server';
/**
 * @fileOverview Provides a Genkit flow to find plausible hospital information based on a user-provided location.
 * The information is AI-generated for illustrative purposes and should not be considered real-time or factual.
 *
 * - findHospitals - A function that takes a location and returns a list of plausible hospitals.
 * - FindHospitalsInput - The input type for the findHospitals function.
 * - FindHospitalsOutput - The return type for the findHospitals function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const FindHospitalsInputSchema = z.object({
  location: z.string().describe("The city, zip code, or general area to search for hospitals."),
});
export type FindHospitalsInput = z.infer<typeof FindHospitalsInputSchema>;

const HospitalSchema = z.object({
  name: z.string().describe("The plausible name of the hospital."),
  address: z.string().describe("The plausible full address of the hospital."),
  phone: z.string().optional().describe("The plausible phone number of the hospital, if available."),
  specialties: z.array(z.string()).optional().describe("A list of plausible key departments or specialties, e.g., 'Cardiology', 'Oncology', 'Pediatrics'."),
  emergencyServices: z.boolean().optional().describe("Indicates if plausible emergency services are available."),
  rating: z.number().min(1).max(5).optional().describe("A plausible star rating for the hospital (1-5).")
});

const FindHospitalsOutputSchema = z.object({
  hospitals: z
    .array(HospitalSchema)
    .describe("A list of plausible hospitals generated by the AI near the specified location."),
  disclaimer: z
    .string()
    .describe("A disclaimer stating that the information is AI-generated, for illustrative purposes, may not be real or current, and to verify independently."),
  searchedLocation: z.string().describe("The location input provided by the user for the search.")
});
export type FindHospitalsOutput = z.infer<typeof FindHospitalsOutputSchema>;

export async function findHospitals(input: FindHospitalsInput): Promise<FindHospitalsOutput> {
  return findHospitalsFlow(input);
}

const findHospitalsPrompt = ai.definePrompt({
  name: 'findHospitalsPrompt',
  input: {schema: FindHospitalsInputSchema},
  output: {schema: FindHospitalsOutputSchema},
  prompt: `You are an assistant that helps users find hospitals by generating plausible, illustrative examples.
Based on the provided location: {{{location}}}, generate a list of 2 to 3 plausible hospital names, their full addresses, phone numbers (if you can make one up), key departments/specialties (e.g., 'Cardiology', 'General Surgery', 'Emergency Medicine', 'Orthopedics'), whether they offer emergency services (true/false), and a plausible star rating (1-5).
The generated data should look realistic but is not real.
Ensure the addresses appear reasonable for a general urban or suburban area.

Crucially, you MUST include a 'disclaimer'. The disclaimer should state: "The hospital information provided is AI-generated for illustrative purposes only. It may not be real, accurate, or current. Always verify information with official sources and consult with healthcare providers for medical advice. In case of a medical emergency, call your local emergency number immediately."
Also, return the 'searchedLocation' which is the original location input by the user.

Format your response as a JSON object according to the output schema.
  `,
});

const findHospitalsFlow = ai.defineFlow(
  {
    name: 'findHospitalsFlow',
    inputSchema: FindHospitalsInputSchema,
    outputSchema: FindHospitalsOutputSchema,
  },
  async (input: FindHospitalsInput) => {
    const {output} = await findHospitalsPrompt(input);
    return output!;
  }
);
