
'use server';
/**
 * @fileOverview Provides a Genkit flow to find plausible pharmacy information based on a user-provided location.
 * The information is AI-generated and should not be considered real-time or factual.
 *
 * - findPharmacies - A function that takes a location and returns a list of plausible pharmacies.
 * - FindPharmaciesInput - The input type for the findPharmacies function.
 * - FindPharmaciesOutput - The return type for the findPharmacies function.
 */

import {ai} from '@/ai/genkit';
import {z}from 'genkit';

const FindPharmaciesInputSchema = z.object({
  location: z.string().describe("The city, zip code, or general area to search for pharmacies."),
  language: z.string().optional().default('en').describe("The language for the AI response, e.g., 'en', 'es'. ISO 639-1 code."),
});
export type FindPharmaciesInput = z.infer<typeof FindPharmaciesInputSchema>;

const PharmacySchema = z.object({
  name: z.string().describe("The plausible name of the pharmacy."),
  address: z.string().describe("The plausible full address of the pharmacy."),
  phone: z.string().optional().describe("The plausible phone number of the pharmacy, if available."),
  hours: z.string().optional().describe("Plausible operating hours, e.g., 'Mon-Fri 9am-7pm, Sat 9am-1pm'."),
});

const FindPharmaciesOutputSchema = z.object({
  pharmacies: z
    .array(PharmacySchema)
    .describe("A list of plausible pharmacies generated by the AI near the specified location."),
  disclaimer: z
    .string()
    .describe("A disclaimer stating that the information is AI-generated, may not be real or current, and to verify independently."),
  searchedLocation: z.string().describe("The location input provided by the user for the search.")
});
export type FindPharmaciesOutput = z.infer<typeof FindPharmaciesOutputSchema>;

export async function findPharmacies(input: FindPharmaciesInput): Promise<FindPharmaciesOutput> {
  return findPharmaciesFlow(input);
}

// Intermediate schema for LLM output
const LLMPromptOutputSchema = z.object({
  pharmacies: z.array(PharmacySchema),
  disclaimer: z.string(),
  searchedLocation: z.string().optional(),
});


const findPharmaciesPrompt = ai.definePrompt({
  name: 'findPharmaciesPrompt',
  input: {schema: FindPharmaciesInputSchema},
  output: {schema: LLMPromptOutputSchema},
  prompt: `You are an assistant that helps users find pharmacies by generating plausible examples.
Your response MUST be in the language specified by the code: {{{language}}}.
(For example, if 'es', respond in Spanish. If 'fr', respond in French. Default to English if language is 'en' or not explicitly supported.)

Based on the provided location: {{{location}}}, generate a list of 3 to 5 plausible pharmacy names, full addresses, phone numbers (if you can make one up), and operating hours.
The generated data should look realistic but is not real.
Ensure the addresses appear reasonable for a general urban or suburban area if a specific type of location isn't implied by the input.

Crucially, you MUST include a disclaimer. The disclaimer should state: "The pharmacy information provided is AI-generated. It may not be real, accurate, or current. Always verify information with official sources before visiting or relying on this information."
ALL parts of your response, including pharmacy names, addresses, hours, and the disclaimer, must be in the language: {{{language}}}.
Also, try to return the 'searchedLocation' which is the original location input by the user.

Format your response as a JSON object according to the output schema. The language of the content in the JSON fields must match {{{language}}}.
  `,
});

const findPharmaciesFlow = ai.defineFlow(
  {
    name: 'findPharmaciesFlow',
    inputSchema: FindPharmaciesInputSchema,
    outputSchema: FindPharmaciesOutputSchema,
  },
  async (input: FindPharmaciesInput) => {
    const { output: llmOutput } = await findPharmaciesPrompt(input);
     if (!llmOutput || !llmOutput.pharmacies || !llmOutput.disclaimer) {
      throw new Error('AI model failed to generate valid pharmacy information.');
    }
    return {
      ...llmOutput,
      searchedLocation: input.location, // Ensure input location is used
    };
  }
);

