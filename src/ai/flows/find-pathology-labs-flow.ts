
'use server';
/**
 * @fileOverview Provides a Genkit flow to find plausible pathology lab information based on a user-provided location.
 * The information is AI-generated and should not be considered real-time or factual.
 *
 * - findPathologyLabs - A function that takes a location and returns a list of plausible pathology labs.
 * - FindPathologyLabsInput - The input type for the findPathologyLabs function.
 * - FindPathologyLabsOutput - The return type for the findPathologyLabs function.
 */

import {ai} from '@/ai/genkit';
import {z}from 'genkit';

const FindPathologyLabsInputSchema = z.object({
  location: z.string().describe("The city, zip code, or general area to search for pathology labs."),
  language: z.string().optional().default('en').describe("The language for the AI response, e.g., 'en', 'es'. ISO 639-1 code."),
});
export type FindPathologyLabsInput = z.infer<typeof FindPathologyLabsInputSchema>;

const PathologyLabSchema = z.object({
  name: z.string().describe("The plausible name of the pathology lab."),
  address: z.string().describe("The plausible full address of the pathology lab."),
  phone: z.string().optional().describe("The plausible phone number of the lab, if available."),
  servicesOffered: z.array(z.string()).optional().describe("A list of plausible common services offered, e.g., 'Blood Tests', 'Urine Analysis', 'Biopsy Processing'."),
  operatingHours: z.string().optional().describe("Plausible operating hours, e.g., 'Mon-Fri 8am-5pm, Sat 8am-12pm'."),
});

const FindPathologyLabsOutputSchema = z.object({
  labs: z
    .array(PathologyLabSchema)
    .describe("A list of plausible pathology labs generated by the AI near the specified location."),
  disclaimer: z
    .string()
    .describe("A disclaimer stating that the information is AI-generated, may not be real or current, and to verify independently."),
  searchedLocation: z.string().describe("The location input provided by the user for the search.")
});
export type FindPathologyLabsOutput = z.infer<typeof FindPathologyLabsOutputSchema>;

export async function findPathologyLabs(input: FindPathologyLabsInput): Promise<FindPathologyLabsOutput> {
  return findPathologyLabsFlow(input);
}

// Intermediate schema for LLM output
const LLMPromptOutputSchema = z.object({
  labs: z.array(PathologyLabSchema),
  disclaimer: z.string(),
  searchedLocation: z.string().optional(),
});

const findPathologyLabsPrompt = ai.definePrompt({
  name: 'findPathologyLabsPrompt',
  input: {schema: FindPathologyLabsInputSchema},
  output: {schema: LLMPromptOutputSchema},
  prompt: `You are an assistant that helps users find pathology labs by generating plausible examples.
Your response MUST be in the language specified by the code: {{{language}}}.
(For example, if 'es', respond in Spanish. If 'fr', respond in French. Default to English if language is 'en' or not explicitly supported.)

Based on the provided location: {{{location}}}, generate a list of 2 to 3 plausible pathology lab names, their full addresses, phone numbers (if you can make one up), common services offered (like 'Blood Tests', 'Urine Analysis', 'Biopsy Processing', 'Imaging - X-Ray'), and operating hours.
The generated data should look realistic but is not real.
Ensure the addresses appear reasonable for a general urban or suburban area.

Crucially, you MUST include a 'disclaimer'. The disclaimer should state: "The pathology lab information provided is AI-generated. It may not be real, accurate, or current. Always verify information with official sources and consult with healthcare providers for medical advice."
ALL parts of your response, including lab names, addresses, services, hours, and the disclaimer, must be in the language: {{{language}}}.
Also, try to return the 'searchedLocation' which is the original location input by the user.

Format your response as a JSON object according to the output schema. The language of the content in the JSON fields must match {{{language}}}.
  `,
});

const findPathologyLabsFlow = ai.defineFlow(
  {
    name: 'findPathologyLabsFlow',
    inputSchema: FindPathologyLabsInputSchema,
    outputSchema: FindPathologyLabsOutputSchema,
  },
  async (input: FindPathologyLabsInput) => {
    const { output: llmOutput } = await findPathologyLabsPrompt(input);
     if (!llmOutput || !llmOutput.labs || !llmOutput.disclaimer) {
      throw new Error('AI model failed to generate valid pathology lab information.');
    }
    return {
      ...llmOutput,
      searchedLocation: input.location, // Ensure input location is used
    };
  }
);

